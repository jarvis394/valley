x-defaults: &defaults
  init: true
  tty: true
  networks:
    - valley_network

name: valley

services:
  # web:
  #   <<: *defaults
  #   container_name: valley-web
  #   env_file:
  #     - .env
  #   ports:
  #     - '4200:4200'
  #   command: turbo dev --filter web --filter @valley/shared
  #   build:
  #     args:
  #       APP: web
  #       START_COMMAND: dev
  #     context: .
  #     dockerfile: ./Dockerfile.dev
  #   depends_on:
  #     - api
  #     - tusd
  #     - minio
  #     - postgres
  #     - redis
  #   volumes:
  #     - ./apps/web:/app/apps/web
  #     - ./.env:/app/.env
  #     - ./packages:/app/packages
  #     - /app/apps/web/node_modules
  #     - /app/node_modules
  #     - /app/apps/web/.next

  # api:
  #   <<: *defaults
  #   container_name: valley-api
  #   env_file:
  #     - .env
  #   ports:
  #     - '${PORT}:${PORT}'
  #   command: turbo dev --filter api --filter @valley/shared
  #   build:
  #     args:
  #       APP: api
  #       START_COMMAND: dev
  #     context: .
  #     dockerfile: ./Dockerfile.dev
  #   depends_on:
  #     - tusd
  #     - minio
  #     - postgres
  #     - redis
  #   volumes:
  #     - ./apps/api:/app/apps/api
  #     - ./packages:/app/packages
  #     - ./.env:/app/.env
  #     - /app/node_modules
  #     - /app/apps/api/node_modules

  # prisma-studio:
  #   <<: *defaults
  #   container_name: valley-prisma-studio
  #   env_file:
  #     - .env
  #   build:
  #     context: .
  #     dockerfile: packages/database/Dockerfile.dev
  #   ports:
  #     - '5555:5555'
  #   depends_on:
  #     - tusd
  #     - minio
  #     - postgres
  #     - redis
  #   volumes:
  #     - .:/app

  minio:
    <<: *defaults
    container_name: valley-minio
    command: minio server --console-address ":9001" /data
    image: minio/minio:latest
    ports:
      - '9000:9000'
      - '9001:9001'
    env_file:
      - .env
    volumes:
      - 'minio:/data/'
    healthcheck:
      test: ['CMD', 'curl', '-fsS', 'http://localhosr:9000/minio/health/ready']
      interval: 10s
      start_interval: 1s
      start_period: 10s

  tusd:
    <<: *defaults
    container_name: valley-tusd
    image: tusproject/tusd:latest
    command: -verbose -s3-bucket ${UPLOAD_BUCKET} -s3-endpoint http://valley-minio:9000 -hooks-http http://host.docker.internal:${PORT}/upload -hooks-enabled-events pre-create,pre-finish
    volumes:
      - tusd:/data
    ports:
      - '8080:8080'
    env_file:
      - .env
    depends_on:
      - minio

  postgres:
    <<: *defaults
    container_name: valley-postgres
    image: postgres:16-alpine
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./postgres:/docker-entrypoint-initdb.d
    ports:
      - '5432:5432'
    restart: always
    healthcheck:
      test: ['CMD', 'pg_isready -d valley -U ${POSTGRES_USER}']
      interval: 5s
      timeout: 5s
      retries: 10

  redis:
    <<: *defaults
    container_name: valley-redis
    image: redis:latest
    env_file:
      - .env
    restart: always
    ports:
      - '6379:6379'
    environment:
      - REDIS_PORT=6379
      - REDIS_DATABASES=16

  # Creates minio bucket on startup if it was not created before
  createbuckets:
    <<: *defaults
    image: minio/mc:latest
    env_file:
      - .env
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc config host add myminio http://valley-minio:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD};
      /usr/bin/mc mb myminio/${UPLOAD_BUCKET};
      /usr/bin/mc anonymous set private myminio/${UPLOAD_BUCKET};
      exit 0;
      "

volumes:
  tusd:
  minio:
  pgdata:
networks:
  valley_network:
