generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x", "linux-musl", "linux-musl-openssl-3.0.x"]
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  email     String   @unique
  fullname  String

  image          UserImage?
  password       Password?
  roles          Role[]
  sessions       Session[]
  connections    Connection[]
  projects       Project[]
  /// Contains user settings and social links
  settings       UserSettings?
}

model UserSettings {
  /// User-set gallery domain
  domain            String?
  /// Unchangable gallery domain
  serviceDomain     String  @default(cuid())
  interfaceLanguage String  @default("en")

  // Socials
  phone     String?
  website   String?
  telegram  String?
  whatsapp  String?
  vk        String?
  instagram String?
  facebook  String?
  vimeo     String?
  youtube   String?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Session {
  id             String   @id @default(cuid())
  expirationDate DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  // non-unique foreign key
  @@index([userId])
}

model Permission {
  id          String @id @default(cuid())
  action      String // e.g. create, read, update, delete
  entity      String // e.g. note, user, etc.
  access      String // e.g. own or any
  description String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roles Role[]

  @@unique([action, entity, access])
}

model Role {
  id          String @id @default(cuid())
  name        String @unique
  description String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users       User[]
  permissions Permission[]
}

model Verification {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  /// The type of verification, e.g. "email" or "phone"
  type String

  /// The thing we're trying to verify, e.g. a user's email or phone number
  target String

  /// The secret key used to generate the otp
  secret String

  /// The algorithm used to generate the otp
  algorithm String

  /// The number of digits in the otp
  digits Int

  /// The number of seconds the otp is valid for
  period Int

  /// The valid characters for the otp
  charSet String

  /// When it's safe to delete this verification
  expiresAt DateTime?

  @@unique([target, type])
}

model Connection {
  id           String @id @default(cuid())
  providerName String
  providerId   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  @@unique([providerName, providerId])
}

model Project {
  id                 String              @id @default(cuid())
  title              String
  url                String
  totalFiles         Int                 @default(0)
  /// Total size is in bytes, string formatted
  totalSize          String              @default("0")
  dateCreated        DateTime            @default(now())
  dateUpdated        DateTime            @default(now()) @updatedAt
  dateShot           DateTime            @default(now())
  /// `null` means stored indefinitely
  storedUntil        DateTime?
  language           String              @default("en")
  protected          Boolean             @default(false)
  password           String?
  folders            Folder[]
  translationStrings TranslationStrings?

  User                 User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId               String?
  translationStringsId Int?
}

model Folder {
  id              String   @id @default(cuid())
  title           String
  isDefaultFolder Boolean
  description     String?
  totalFiles      Int      @default(0)
  dateCreated     DateTime @default(now())
  dateUpdated     DateTime @default(now()) @updatedAt
  // Total size is in bytes, string formatted
  totalSize       String   @default("0")
  files           File[]

  Project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
}

model UserImage {
  id          String  @id @default(cuid())
  altText     String?
  contentType String
  bucket      String
  key         String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model File {
  id           String   @id
  bucket       String
  key          String
  thumbnailKey String?
  exifMetadata Json
  name         String
  type         String
  /// File size in bytes, string formatted
  size         String
  dateCreated  DateTime @default(now())

  Folder   Folder @relation(fields: [folderId], references: [id], onDelete: Cascade)
  folderId String
}

model TranslationStrings {
  id         String @id @default(cuid())
  name       String
  occupation String
  hint       String

  Project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String  @unique
}
